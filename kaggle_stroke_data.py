# -*- coding: utf-8 -*-
"""Kaggle_stroke_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E-RVHhVCuNLS0ePK9udJ7o31z2WT2-c5

MACHINE LEARNING OF KAGGLE STROKE DATASET USING KNN-CLASSIFIER
"""

import pandas as pd
import seaborn as sns
from sklearn.impute import SimpleImputer
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
import matplotlib.pyplot as plt

"""Starting with exploration of the dataset"""

data = pd.read_csv('healthcare-dataset-stroke-data.csv')
data.shape

"""We need to drop the gender='Other' row, since it only occurred once in the data and will affect the training of the model

"""

# df = data.drop(columns='gender', index='Other')
# df = data.drop(index=('gender', 'Other'), axis=1)
# df = data.drop()
data.gender.index

# data.gender.value_counts().Other.row()
# data.gender.values==Other
# for i in range(len(data.gender)):
#   if data.gender[i] == 'Other':
#     print(data.gender[i].index)
for i in data.index:
  if data.gender[i] == 'Other':
    print(i)

df = data.drop(index=3116)
df.shape

df.columns

df.gender.value_counts()

"""The dataset has 5110 rows and 12 columns, 4-int columns, 3 float columns and 5 object columns """

df.head()

"""For data preprocessing, parameters that will bw regarded as very important to us for stroke detection are parameters which are medically considered risk factors for developing stroke. These include; 'gender', 'age', 'hypertension', 'heart disease', 'avg_glucose_level', 'bmi', 'smoking status."""

df.isnull().sum()

sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap='viridis')

imp = SimpleImputer(missing_values=np.nan, strategy="mean")
df.bmi = imp.fit_transform(df[['bmi']])

df.isnull().sum()

# df.describe()
df.head()

features = df.loc[:, ['gender', 'age', 'hypertension', 'heart_disease', 'avg_glucose_level', 'bmi', 'smoking_status']]
target = df.stroke
feature_train, feature_test, target_train, target_test = train_test_split(features, target, test_size=0.25, shuffle=True)
feature_train.shape
feature_test.head()

# x = df.loc[:,['hypertension','heart_disease','bmi', 'avg_glucose_level']]
# scale = StandardScaler()
# x_scaled = scale.fit_transform(x)
# y = df.stroke
# trial_model = KNeighborsClassifier()
# x_scaled_file = pd.DataFrame(x_scaled, columns=x.columns)
# cross_val_score(trial_model, x_scaled,y, cv=5, scoring='accuracy').mean()
# y.value_counts(normalize=True)

model = KNeighborsClassifier(n_neighbors=10)

scaler = StandardScaler()

# ohe = OneHotEncoder(sparse=False)
# ohe.fit_transform(df[['smoking_status']])
column_trans = make_column_transformer((OneHotEncoder(), ['gender', 'smoking_status']), remainder='passthrough')

pipe = make_pipeline(column_trans, scaler, model)
cross_val_score(pipe, feature_train, target_train, cv = 5, scoring='accuracy').mean()

pipe.fit(feature_train, target_train)

pipe.predict(feature_train)

target_test

# neighbors_range = range(1, 21)
# # param_grid = dict(kneighborsclassifier__n_neighbors = neighbors_range)
# param_grid = dict(kneighborsclassifier__n_neighbors=neighbors_range)
# grid = GridSearchCV(pipe, param_grid, cv=5, scoring='accuracy')
# grid.fit(feature_train, target_train)
# grid.best_score_
# grid.best_params_